from flask import Flask, request,make_response, current_app
from flask_failsafe import failsafe
import flask
from flask_cors import CORS, cross_origin
import json
import hashlib
from flaskext.mysql import MySQL
import re

mysql = MySQL()
app = Flask(__name__)
app.config['MYSQL_DATABASE_USER'] = 'root'
app.config['MYSQL_DATABASE_PASSWORD'] = ''
app.config['MYSQL_DATABASE_DB'] = 'app'
app.config['MYSQL_DATABASE_HOST'] = 'localhost'
mysql.init_app(app)
CORS(app)

mask = []
mac_mask = []

with open("mask.txt", 'r') as f:
    mask = json.loads(f.read())
with open("mac_mask.txt", 'r') as fm:
    mac_mask = json.loads(fm.read())

def features(request, cross):
    agent = ""
    accept = ""
    encoding = ""
    language = ""
    IP = ""

    try:
        agent = request.headers.get('User-Agent')
        accpet = request.headers.get('Accept')
        encoding = request.headers.get('Accept-Encoding')
        language = request.headers.get('Accept-Language')
        IP = request.remote_addr
    except:
        pass

    feature_list = [
            "agent",
            "accept",
            "encoding",
            "language",
            "langsDetected",
            "resolution",
            "fonts",
            "WebGL", 
            "inc", 
            "gpu", 
            "gpuImgs", 
            "timezone", 
            "plugins", 
            "cookie", 
            "localstorage", 
            "adBlock", 
            "cpu_cores", 
            "canvas_test", 
            "audio"]

    single_feature_list = [
            "agent",
            "accept",
            "encoding",
            "language",
            "resolution",
            "inc",  
            "plugins", 
            "cookie", 
            "localstorage", 
            "canvas_test", 
            "audio"]
    
    cross_feature_list = [
            "fonts",
            "langsDetected",
            "audio",
            "gpuImgs",
            "cpu_cores",
            "gpu"]
     
    if cross:
        feature_list = single_feature_list
    
    result = request.get_json()

    single_hash = "single"
    cross_hash = "cross"

    #with open("fonts.txt", 'a') as f:
        #f.write(result['fonts'] + '\n')

    fonts = list(result['fonts'])

    cnt = 0
    for i in range(len(mask)):
        fonts[i] = str(int(fonts[i]) & mask[i] & mac_mask[i])
        if fonts[i] == '1':
            cnt += 1

    result['agent'] = agent
    result['accept'] = accept
    result['encoding'] = encoding
    result['language'] = language
    
    print agent

    def getFeatureString(list):
                for feature in list:

            feature_str = "IP"
            value_str = "'" + IP + "'"

            if result[feature] is not "":
                                value = result[feature]
                        else:
                                value = "NULL"

                        feature_str += "," + feature
                        #for gpu imgs
                        if feature == "gpuImgs":
                                value = ",".join('%s_%s' % (k,v) for k,v in value.iteritems())
                        else:
                                value = str(value)

                        #        if feature == "cpu_cores" and type(value) != 'int':
                        #           value = -1
                        #fix the bug for N/A for cpu_cores
                        if feature == 'cpu_cores':
                                value = int(value)

                        if feature == 'langsDetected':
                                value = str("".join(value))
                                value = value.replace(" u'", "")
                                value = value.replace("'", "")
                                value = value.replace(",", "_")
                                value = value.replace("[", "")
                                value = value.replace("]", "")
                                value = value[1:]
        
                        value_str += ",'" + str(value) + "'"
                        #print feature, hash_object.hexdigest()




    result['fonts'] = fonts 
    
    if not cross:
        for feature in single_feature_list:
                        single_hash += str(result[feature])
                        hash_object = hashlib.md5(str(result[feature]))

                        hash_object = hashlib.md5(single_hash)
                        single_hash = hash_object.hexdigest()

        return {"single": single_hash}
    else:
        for feature in single_feature_list:
            single_hash += str(result[feature])
            hash_object = hashlib.md5(str(result[feature]))

        for feature in cross_feature_list:
            cross_hash += str(result[feature])
            hash_object = hashlib.md5(str(result[feature]))

        hash_object = hashlib.md5(single_hash)
        single_hash = hash_object.hexdigest()
        hash_object = hashlib.md5(cross_hash)
        cross_hash = hash_object.hexdigest()

        feature_str += ',browser_fingerprint,computer_fingerprint'
        value_str += ",'" + single_hash + "','" + cross_hash + "'"

        print (single_hash, cross_hash)
        return {"single": single_hash, "cross": cross_hash, "feature_str": [], "value_str": []}

# ROUTES
@app.route("/")
def hello():
    return "Hello World!"

@app.route("/newaccount", methods=['POST'])
def newAccount():

    result = request.get_json()
    fingerprint = features(request, True)

    db = mysql.get_db()
    cursor = db.cursor()
    sql_str = "SELECT id FROM users WHERE user = '" + result['user'] + "'"
    cursor.execute(sql_str)
    db.commit()
    for row in cursor:
        if row is not None:   
            return flask.jsonify({"result": 'userexists'})

    db = mysql.get_db()
    cursor = db.cursor()
    sql_str = "SELECT * FROM devices WHERE computer_fingerprint = '" + fingerprint['cross'] + "'"
    cursor.execute(sql_str)
    db.commit()
    for row in cursor:
        if row is not None:
            return flask.jsonify({"result": 'notunique'})
    
    db = mysql.get_db()
    cursor = db.cursor()
    sql_str = "INSERT INTO users (user) VALUES ('" + result['user'] + "');"
    cursor.execute(sql_str)
    db.commit()

    db = mysql.get_db()
    cursor = db.cursor()
    sql_str = "SELECT LAST_INSERT_ID();"
    cursor.execute(sql_str)
    db.commit()
    userID = cursor.fetchone()
    
    db = mysql.get_db()
    cursor = db.cursor()
    sql_str = "INSERT INTO devices (" + fingerprint["feature_str"][0] + ",userID) VALUES (" + fingerprint["value_str"][0] + ",'" + str(userID[0]) + "';"
    cursor.execute(sql_str)
    db.commit()

    db = mysql.get_db()
    cursor = db.cursor()
    sql_str = "SELECT LAST_INSERT_ID();"
    cursor.execute(sql_str)
    db.commit()
    deviceID = cursor.fetchone()

    db = mysql.get_db()
    cursor = db.cursor()
    sql_str = "INSERT INTO devices (" + fingerprint["feature_str"][1] + ",deviceID) VALUES (" + fingerprint["value_str"][1] + ",'" + str(deviceID[0]) + "';"
    cursor.execute(sql_str)
    db.commit()
    
    return flask.jsonify({"result": 'success'})

@app.route("/login", methods=['POST'])
def login():
    result = request.get_json()
    fingerprint = features(request, False)

    db = mysql.get_db()
    cursor = db.cursor()
    sql_str = "SELECT D.browser_fingerprint FROM devices D INNER JOIN users U ON D.userID = U.id WHERE U.user = '" + result['user'] + "'"
    cursor.execute(sql_str)
    db.commit()
    for row in cursor:
        if row == fingerprint['single']:
            return flask.jsonify({"result": 'allowed'})
        else:
            return flask.jsonify({"result": 'not on account'})
